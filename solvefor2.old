def solve_for_twos(array, rows, columns, location, section)
  clear_all(array)
  temp_location = []
  temp_array = []


  rows.each do |row|
    
    columns.each do |column|
      #p "row: #{row} column: #{column}"
      element = array[row][column]
      temp_location << [row, column]
      temp_array << array[row][column]

      if (temp_array.size % 9) == 0
      
        temp_array.each_with_index do |element, index|
          if (element.size == 2) && (@loop_once == 0)

            if temp_array.count(element) == 2 ## This will clear pairs

              pair = element
              r = temp_location[index][0]
              c = temp_location[index][1]

              new_value = pair[0]
              alt_value = pair[1]

              if @other_path == 0
                array[r][c] = new_value
              else
                array[r][c] = alt_value
              end

              temp_array.each_with_index do |arr, index|
                unless arr.is_a?(Integer)
                  r = temp_location[index][0]
                  c = temp_location[index][1]
                  if arr == element
                    @pairs << {[r,c] => element} #if arr == element
                  else
                   array[r][c] -= pair
                  end
                end
              end
              save_history(location, row, column, element, new_value, :solve_for__pair, :matching_pair)

              @loop_once = 1
              clear_all(array)
              return

            else ## Looking for 2 different pairs and a trip that have similar numbers

              temp_array.each_with_index do |arg, index|
              
                unless arg.is_a?(Integer)
                
                  if arg.size == 2
                    if temp_array.include?((element + arg).uniq) 
                      if (element + arg).uniq.size == 3
                        @trip = (element + arg).uniq 
                        @pair1 = element
                        @pair2 = arg
                      end
                    end
                  end
                 
                  temp_array.each_with_index do |a, index|
                     r = temp_location[index][0]
                     c = temp_location[index][1]
                    unless a.is_a?(Integer)
                      if  a == @trip
                      elsif a == @pair1
                      elsif a == @pair2
                      else
                        if @trip != nil
                          p a 
                          p array[r][c] -= @trip
                          
                          #@history << "#{@pair1}, #{@pair2}, and #{@trip} make a 'trip' -- values cleared from #{location}"
                          clear_all(array)
                        end
                      end
                    end
                  end
                  puts
                  clear_all(array)

                end
              end
            end
          end
          if @trip != nil
            @history << "#{@pair1}, #{@pair2}, and #{@trip} make a 'trip' -- values cleared from #{location}"
          end
        end
        #@history << "#{@pair1}, #{@pair2}, and #{@trip} make a 'trip' -- values cleared from #{location}"
        @loop_once = 1
        clear_all(array)
        return
      end
    end
   # temp_array = []
   # temp_location = [] 
  end
end